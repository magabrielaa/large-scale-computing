import matplotlib.pyplot as plt

# Read in output generated by serial code and extract computation times and 
# number of cores

with open('q1/serial/q1_serial.out', 'r') as f:
    lines = f.readlines()
    computation_times_serial = [] # Initialize empty list to store computation times
    data_size_serial = [1]
    for line in lines:
        columns = line.split()
        computation_times_serial.append(float(columns[6]))

with open('q3/serial/q3_serial.out', 'r') as f:
    lines = f.readlines()
    for line in lines:
        columns = line.split()
        data_size_serial.append(int(columns[7][:-1]))
        computation_times_serial.append(float(columns[9]))

# Read in output generated by parallel code and extract computation times and 
# number of cores

with open('q1/parallel/q1_parallel.out', 'r') as f:
    lines = f.readlines()
    computation_times_parallel = [] # Initialize empty list to store computation times
    data_size_parallel = [1] 
    for line in lines:
        columns = line.split()
        computation_times_parallel.append(float(columns[6]))

with open('q3/parallel/q3_parallel.out', 'r') as f:
    lines = f.readlines()
    for line in lines:
        columns = line.split()
        data_size_parallel.append(int(columns[7][:-1]))
        computation_times_parallel.append(float(columns[10]))

# Create the plot where x is databse magnitude and y is computation time
fig, ax = plt.subplots()
ax.plot(data_size_serial, computation_times_serial, label='Serial')
ax.plot(data_size_parallel, computation_times_parallel, label='Parallel')

# Add axis labels and a title
ax.set_xlabel('Database order of magnitude')
ax.set_ylabel('Computation Time (seconds)')
ax.set_title('Computation Time vs. Database Magnitude')

# Set tick values for the x-axis
ax.set_xticks([1, 50, 100, 150])

# Add a legend
ax.legend()

# Display the plot
plt.show()